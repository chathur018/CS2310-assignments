/**
*4-bit CLA based 16-bit adder using higher-level propagate and generate terms for unsigned integers
*Delay = (6 + 2[n/16])T    ([] represents ceiling)
*/

CHIP Q3signed{
    IN x[16],y[16],a;
    OUT s[16],of;

    PARTS:
//c0 = (a')' = a
    Not(in=a,out=nota);
    Not(in=nota,out=c0);
    Or(a=a, b=nota, out=true);
    And(a=a, b=nota, out=false);

//t = y if a=0, else t will be flipped
    Xor(a=y[0], b=a ,out=t0);
    Xor(a=y[1], b=a ,out=t1);
    Xor(a=y[2], b=a ,out=t2);
    Xor(a=y[3], b=a ,out=t3);    
    Xor(a=y[4], b=a ,out=t4);
    Xor(a=y[5], b=a ,out=t5);
    Xor(a=y[6], b=a ,out=t6);
    Xor(a=y[7], b=a ,out=t7);
    Xor(a=y[8], b=a ,out=t8);
    Xor(a=y[9], b=a ,out=t9);
    Xor(a=y[10], b=a ,out=t10);
    Xor(a=y[11], b=a ,out=t11);
    Xor(a=y[12], b=a ,out=t12);
    Xor(a=y[13], b=a ,out=t13);
    Xor(a=y[14], b=a ,out=t14);
    Xor(a=y[15], b=a ,out=t15);

//p[i] =  x[i] ^ t[i] 
    Xor(a=x[0], b=t0 ,out=p0);
    Xor(a=x[1], b=t1 ,out=p1);
    Xor(a=x[2], b=t2 ,out=p2);
    Xor(a=x[3], b=t3 ,out=p3);    
    Xor(a=x[4], b=t4 ,out=p4);
    Xor(a=x[5], b=t5 ,out=p5);
    Xor(a=x[6], b=t6 ,out=p6);
    Xor(a=x[7], b=t7 ,out=p7);
    Xor(a=x[8], b=t8 ,out=p8);
    Xor(a=x[9], b=t9 ,out=p9);
    Xor(a=x[10], b=t10 ,out=p10);
    Xor(a=x[11], b=t11 ,out=p11);
    Xor(a=x[12], b=t12 ,out=p12);
    Xor(a=x[13], b=t13 ,out=p13);
    Xor(a=x[14], b=t14 ,out=p14);
    Xor(a=x[15], b=t15 ,out=p15);

//g[i] = x[i].y[i] 
    And(a=x[0], b=t0 ,out=g0);
    And(a=x[1], b=t1 ,out=g1);
    And(a=x[2], b=t2 ,out=g2);
    And(a=x[3], b=t3 ,out=g3);    
    And(a=x[4], b=t4 ,out=g4);
    And(a=x[5], b=t5 ,out=g5);
    And(a=x[6], b=t6 ,out=g6);
    And(a=x[7], b=t7 ,out=g7);
    And(a=x[8], b=t8 ,out=g8);
    And(a=x[9], b=t9 ,out=g9);
    And(a=x[10], b=t10 ,out=g10);
    And(a=x[11], b=t11 ,out=g11);
    And(a=x[12], b=t12 ,out=g12);
    And(a=x[13], b=t13 ,out=g13);
    And(a=x[14], b=t14 ,out=g14);
    And(a=x[15], b=t15 ,out=g15);

//capital P represents higher level propagate term
//P0 = p3.p2.p1.p0   
//P(i) = p(4i+3).p(4i+2).p(4i+1).p(4i)                
    And4(a=p3, b=p2, c=p1, d=p0, out=P0);
    And4(a=p7, b=p6, c=p5, d=p4, out=P1);
    And4(a=p11, b=p10, c=p9, d=p8, out=P2);
    And4(a=p15, b=p14, c=p13, d=p12, out=P3);

    And4(a=p3, b=p2, c=p1, d=g0, out=a0);
    And4(a=p3, b=p2, c=g1, d=true, out=a1);
    And(a=p3, b=g2, out=a2);    

    And4(a=p7, b=p6, c=p5, d=g4, out=a4);
    And4(a=p7, b=p6, c=g5, d=true, out=a5);
    And(a=p7, b=g6, out=a6);

    And4(a=p11, b=p10, c=p9, d=g8, out=a8);
    And4(a=p11, b=p10, c=g9, d=true, out=a9);
    And(a=p11, b=g10, out=a10);

    And4(a=p15, b=p14, c=p13, d=g12, out=a12);
    And4(a=p15, b=p14, c=g13, d=true, out=a13);
    And(a=p15, b=g14, out=a14);

//G represents higher level generate terms
//G0 = a0 + a1 + a2 + a3
//G0 = p3.p2.p1.g0 + p3.p2.g1 + p3.g2 + g3
//G(i) = p(4i+3).p(4i+2).p(4i+1).g(4i) + p(4i+3).p(4i+2).g(4i+1) + p(4i+3).g(4i+2) + g(4i+3)
    Or4(a=a0, b=a1, c=a2, d=g3, out=G0);
    Or4(a=a4, b=a5, c=a6, d=g7, out=G1);
    Or4(a=a8, b=a9, c=a10, d=g11, out=G2);
    Or4(a=a12, b=a13, c=a14, d=g15, out=G3);

//c4 = P0.c0 + G0
    And(a=P0, b=c0, out=b0);
    Or(a=b0, b=G0, out=c4);

//c8 = P2.P1.P0 + P2.P1.G0 + P2.G1 + G2
    And4(a=P1, b=P0, c=c0, d=true, out=b1);
    And(a=P1, b=G0, out=b2);
    Or4(a=b1, b=b2, c=G1, d=false, out=c8);

//c12 = P2.P1.P0.c0 + P2.P1.G0 + P2.G1 + G2
    And4(a=P2, b=P1, c=P0, d=c0, out=b3);
    And4(a=P2, b=P1, c=G0, d=true, out=b4);
    And(a=P2, b=G1, out=b5);
    Or4(a=b3, b=b4, c=b5, d=G2, out=c12);

//c16 = P3.P2.P1.P0.c0 + P3.P2.P1.G0 + P3.P2.G1 + P3.G2 + G3
    And5(a=P3, b=P2, c=P1, d=P0, e=c0, out=b6);
    And4(a=P3, b=P2, c=P1, d=G0, out=b7);
    And4(a=P3, b=P2, c=G1, d=true, out=b8);
    And(a=P3, b=G2, out=b9);
    Or5(a=b6, b=b7, c=b8, d=b9, e=G3, out=c16);

//finding c1,c2,c3 from c0
    And(a=p0, b=c0, out=i0);
    Or(a=i0, b=g0, out=c1);

    And4(a=p1, b=p0, c=c0, d=true, out=i1);
    And(a=p1, b=g0, out=i2);
    Or4(a=i1, b=i2, c=g1, d=false, out=c2);

    And4(a=p2, b=p1, c=p0, d=c0, out=i3);
    And4(a=p2, b=p1, c=g0, d=true, out=i4);
    And(a=p2, b=g1, out=i5);
    Or4(a=i3, b=i4, c=i5, d=g2, out=c3);    

//finding c5,c6,c7 from c4
    And(a=p4, b=c4, out=j0);
    Or(a=j0, b=g4, out=c5);

    And4(a=p5, b=p4, c=c4, d=true, out=j1);
    And(a=p5, b=g4, out=j2);
    Or4(a=j1, b=j2, c=g5, d=false, out=c6);

    And4(a=p6, b=p5, c=p4, d=c4, out=j3);
    And4(a=p6, b=p5, c=g4, d=true, out=j4);
    And(a=p6, b=g5, out=j5);
    Or4(a=j3, b=j4, c=j5, d=g6, out=c7);

//finding c9,c10,c11 from c8
    And(a=p8, b=c8, out=k0);
    Or(a=k0, b=g8, out=c9);

    And4(a=p9, b=p8, c=c8, d=true, out=k1);
    And(a=p9, b=g8, out=k2);
    Or4(a=k1, b=k2, c=g9, d=false, out=c10);

    And4(a=p10, b=p9, c=p8, d=c8, out=k3);
    And4(a=p10, b=p9, c=g8, d=true, out=k4);
    And(a=p10, b=g9, out=k5);
    Or4(a=k3, b=k4, c=k5, d=g10, out=c11);

//finding c13,c14,c15 from c12
    And(a=p12, b=c12, out=l0);
    Or(a=l0, b=g12, out=c13);

    And4(a=p13, b=p12, c=c12, d=true, out=l1);
    And(a=p13, b=g12, out=l2);
    Or4(a=l1, b=l2, c=g13, d=false, out=c14);

    And4(a=p14, b=p13, c=p12, d=c12, out=l3);
    And4(a=p14, b=p13, c=g12, d=true, out=l4);
    And(a=p14, b=g13, out=l5);
    Or4(a=l3, b=l4, c=l5, d=g14, out=c15);   

//s[i] = p[i] ^ c[i]
    Xor(a=p0, b=c0, out=s[0]);
    Xor(a=p1, b=c1, out=s[1]);
    Xor(a=p2, b=c2, out=s[2]);
    Xor(a=p3, b=c3, out=s[3]);
    Xor(a=p4, b=c4, out=s[4]);
    Xor(a=p5, b=c5, out=s[5]);
    Xor(a=p6, b=c6, out=s[6]);
    Xor(a=p7, b=c7, out=s[7]);
    Xor(a=p8, b=c8, out=s[8]);
    Xor(a=p9, b=c9, out=s[9]);
    Xor(a=p10, b=c10, out=s[10]);
    Xor(a=p11, b=c11, out=s[11]);
    Xor(a=p12, b=c12, out=s[12]);
    Xor(a=p13, b=c13, out=s[13]);
    Xor(a=p14, b=c14, out=s[14]);
    Xor(a=p15, b=c15, out=s[15]);

//of = c16 ^ c15 
    Xor(a=c16, b=c15, out=of);
}