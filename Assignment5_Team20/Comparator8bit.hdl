/**
*8-bit comparator
*input x,y (8-bit)
*output z=1 if x=y
*output z=0 if x!=y
*/

CHIP Comparator8bit{
    IN x[8], y[8];
    OUT out;

/* z = (x7@y7).(x6@y6).(x5@y5).(x4@y4).(x3@y3).(x2@y2).(x1@y1).(x0@y0) (@ is Xnor gate)
   z = Not(Not((x7@y7).(x6@y6).(x5@y5).(x4@y4).(x3@y3).(x2@y2).(x1@y1).(x0@y0)))
   z = Not((x7^y7)+(x6^y6)+(x5^y5)+(x4^y4)+(x3^y3)+(x2^y2)+(x1^y1)+(x0^y0))   (^ is Xor gate)
   z = Not(z7 + z6 + z5 + z4 + z3 + z2 + z1 + z0)
*/   
   

    PARTS:

    Xor(a=x[0], b=y[0], out=z0);
    Xor(a=x[1], b=y[1], out=z1);
    Xor(a=x[2], b=y[2], out=z2);
    Xor(a=x[3], b=y[3], out=z3);
    Xor(a=x[4], b=y[4], out=z4);
    Xor(a=x[5], b=y[5], out=z5);
    Xor(a=x[6], b=y[6], out=z6);
    Xor(a=x[7], b=y[7], out=z7);

    Or(a=z0, b=z1, out=b1);
    Or(a=z2, b=z3, out=b3);
    Or(a=z4, b=z5, out=b5);
    Or(a=z6, b=z7, out=b7);

//z = Not(b1 + b3 + b5 + b7)
    Or(a=b1, b=b3, out=a1);
    Or(a=b5, b=b7, out=a2);

//z = Not(a1 + a2)
    Or(a=a1, b=a2, out=notout);

//z = Not(notz)
    Not(in=notout, out=out);
}