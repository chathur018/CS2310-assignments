/**
*4-bit CLA based 8-bit adder using higher-level propagate and generate terms
*Delay = (6 + 2[n/16])T    ([] represents ceiling)
*It also gives last carry bit c8 in output
*/

CHIP CLAadder8bit{
    IN x0[8],y0[8],a;
    OUT out[8], c8;

    PARTS:
//c0 = (a')' = a
    Not(in=a,out=nota);
    Not(in=nota,out=c0);

//t = y if a=0, else t will be flipped
    Xor(a=y0[0], b=a ,out=t0);
    Xor(a=y0[1], b=a ,out=t1);
    Xor(a=y0[2], b=a ,out=t2);
    Xor(a=y0[3], b=a ,out=t3);    
    Xor(a=y0[4], b=a ,out=t4);
    Xor(a=y0[5], b=a ,out=t5);
    Xor(a=y0[6], b=a ,out=t6);
    Xor(a=y0[7], b=a ,out=t7);

//p[i] =  x[i] ^ t[i] 
    Xor(a=x0[0], b=t0 ,out=p0);
    Xor(a=x0[1], b=t1 ,out=p1);
    Xor(a=x0[2], b=t2 ,out=p2);
    Xor(a=x0[3], b=t3 ,out=p3);    
    Xor(a=x0[4], b=t4 ,out=p4);
    Xor(a=x0[5], b=t5 ,out=p5);
    Xor(a=x0[6], b=t6 ,out=p6);
    Xor(a=x0[7], b=t7 ,out=p7);

//g[i] = x[i].y[i] 
    And(a=x0[0], b=t0 ,out=g0);
    And(a=x0[1], b=t1 ,out=g1);
    And(a=x0[2], b=t2 ,out=g2);
    And(a=x0[3], b=t3 ,out=g3);    
    And(a=x0[4], b=t4 ,out=g4);
    And(a=x0[5], b=t5 ,out=g5);
    And(a=x0[6], b=t6 ,out=g6);
    And(a=x0[7], b=t7 ,out=g7);

//capital P represents higher level propagate term
//P0 = p3.p2.p1.p0   
//P(i) = p(4i+3).p(4i+2).p(4i+1).p(4i)                
    And4(a=p3, b=p2, c=p1, d=p0, out=P0);
    And4(a=p7, b=p6, c=p5, d=p4, out=P1);

    And4(a=p3, b=p2, c=p1, d=g0, out=a0);
    And4(a=p3, b=p2, c=g1, d=true, out=a1);
    And(a=p3, b=g2, out=a2);    

    And4(a=p7, b=p6, c=p5, d=g4, out=a4);
    And4(a=p7, b=p6, c=g5, d=true, out=a5);
    And(a=p7, b=g6, out=a6);

//G represents higher level generate terms
//G0 = a0 + a1 + a2 + a3
//G0 = p3.p2.p1.g0 + p3.p2.g1 + p3.g2 + g3
//G(i) = p(4i+3).p(4i+2).p(4i+1).g(4i) + p(4i+3).p(4i+2).g(4i+1) + p(4i+3).g(4i+2) + g(4i+3)
    Or4(a=a0, b=a1, c=a2, d=g3, out=G0);
    Or4(a=a4, b=a5, c=a6, d=g7, out=G1);

//c4 = P0.c0 + G0
    And(a=P0, b=c0, out=b0);
    Or(a=b0, b=G0, out=c4);

//c8 = P2.P1.P0 + P2.P1.G0 + P2.G1 + G2
    And4(a=P1, b=P0, c=c0, d=true, out=b1);
    And(a=P1, b=G0, out=b2);
    Or4(a=b1, b=b2, c=G1, d=false, out=c8);

//finding c1,c2,c3 from c0
    And(a=p0, b=c0, out=i0);
    Or(a=i0, b=g0, out=c1);

    And4(a=p1, b=p0, c=c0, d=true, out=i1);
    And(a=p1, b=g0, out=i2);
    Or4(a=i1, b=i2, c=g1, d=false, out=c2);

    And4(a=p2, b=p1, c=p0, d=c0, out=i3);
    And4(a=p2, b=p1, c=g0, d=true, out=i4);
    And(a=p2, b=g1, out=i5);
    Or4(a=i3, b=i4, c=i5, d=g2, out=c3);    

//finding c5,c6,c7 from c4
    And(a=p4, b=c4, out=j0);
    Or(a=j0, b=g4, out=c5);

    And4(a=p5, b=p4, c=c4, d=true, out=j1);
    And(a=p5, b=g4, out=j2);
    Or4(a=j1, b=j2, c=g5, d=false, out=c6);

    And4(a=p6, b=p5, c=p4, d=c4, out=j3);
    And4(a=p6, b=p5, c=g4, d=true, out=j4);
    And(a=p6, b=g5, out=j5);
    Or4(a=j3, b=j4, c=j5, d=g6, out=c7);

//out[i] = p[i] ^ c[i]
    Xor(a=p0, b=c0, out=out[0]);
    Xor(a=p1, b=c1, out=out[1]);
    Xor(a=p2, b=c2, out=out[2]);
    Xor(a=p3, b=c3, out=out[3]);
    Xor(a=p4, b=c4, out=out[4]);
    Xor(a=p5, b=c5, out=out[5]);
    Xor(a=p6, b=c6, out=out[6]);
    Xor(a=p7, b=c7, out=out[7]);

//usigned addition or subtraction overflow
//    And(a=c8, b=nota, out=ofuas);

//signed addition or subtraction overflow
//    Xor(a=c8, b=c7, out=ofsas);
}