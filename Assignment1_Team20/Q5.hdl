/**
*3-to-8 bit decoder
* Due to reverse convention of output
* y[7] is the first output bit of question
* program output
* y[8] = y[7]y[6]y[5]y[4]y[3]y[2]y[1]y[0]
*/

CHIP Q5 {
    IN x[3];
    OUT y[8];

    PARTS:    
    Not(in=x[0], out=notx0);
    Not(in=x[1], out=notx1);
    Not(in=x[2], out=notx2);

//y[7] == x[0]'.x[1]'.x[2]' == (x[0]+x[1])'.x[2]' == o10'.x[2]' 
    Or(a=x[0], b=x[1], out=o10);
    Not(in=o10, out=noto10);
    And(a=noto10, b=notx2, out=y[7]);

//y[6] == x[2]'.x[1]'.x[0] == (x[2]+x[1])'.x[0] == o11'.x[0]
    Or(a=x[1], b=x[2], out=o11);
    Not(in=o11, out=noto11);
    And(a=noto11, b=x[0], out=y[6]);

//y[5] == x[2]'.x[0]'.x[1] == (x[2]+x[0])'.x[1] == o12'.x[1]
    Or(a=x[0], b=x[2], out=o12);
    Not(in=o12, out=noto12);
    And(a=noto12, b=x[1], out=y[5]);

//y[4] == x[2]'.x[1].x[0] == x[2]'.(x[1].x[0]) == x[2]'.a13
    And(a=x[0], b=x[1], out=a13);
    And(a=a13, b=notx2, out=y[4]);

//y[3] == x[0]'.x[1]'.x[2] == (x[0]+x[1])'.x[2] == o14'.x[2]
    Or(a=x[0], b=x[1], out=o14);
    Not(in=o14, out=noto14);
    And(a=noto14, b=x[2], out=y[3]);

//y[2] == x[1]'.x[2].x[0] == x[1]'.(x[2].x[0]) == x[2]'.a15
    And(a=x[0], b=x[2], out=a15);
    And(a=a15, b=notx1, out=y[2]);

//y[1] == x[0]'.x[1].x[2] == x[0]'.(x[1].x[2]) == x[0]'.a16
    And(a=x[1], b=x[2], out=a16);
    And(a=a16, b=notx0, out=y[1]);

//y[0] == x[0].x[1].x[2] == x[0].(x[1].x[2]) == x[0].a17
    And(a=x[1], b=x[2], out=a17);
    And(a=a17, b=x[0], out=y[0]);
}