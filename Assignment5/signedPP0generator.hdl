/*
*PP0 = X.y[0].(2^0)
*here X represents as 16-bit with first 8 bits as x[8] bus and remaining 8 bits as x[7]th bit
*/

CHIP signedPP0generator{
    IN x[8],y;
    OUT out[16];

    PARTS:
    
    Not(in=y,out=noty);
    And(a=y,out=nota,out=false);
//false is a 0 bit    

    And(a=x[0],b=y,out=x0);
    And(a=x[1],b=y,out=x1);
    And(a=x[2],b=y,out=x2);
    And(a=x[3],b=y,out=x3);
    And(a=x[4],b=y,out=x4);
    And(a=x[5],b=y,out=x5);
    And(a=x[6],b=y,out=x6);
    And(a=x[7],b=y,out=x7);
    And(a=x[7],b=y,out=x8);
    And(a=x[7],b=y,out=x9);
    And(a=x[7],b=y,out=x10);
    And(a=x[7],b=y,out=x11);
    And(a=x[7],b=y,out=x12);
    And(a=x[7],b=y,out=x13);
    And(a=x[7],b=y,out=x14);
    And(a=x[7],b=y,out=x15);

//x0,x1....x15 gets the value 0 if y[i]==0
//else stores x[7] into variables x0,x1...x7 and x8,x9..x15 gets the value 1
//PP0 = X.y[0].(2^0)
//shifting 0 units to the left

    Assignmentoperator(in=x0,out=out[0]);
    Assignmentoperator(in=x1,out=out[1]);
    Assignmentoperator(in=x2,out=out[2]);
    Assignmentoperator(in=x3,out=out[3]);
    Assignmentoperator(in=x4,out=out[4]);
    Assignmentoperator(in=x5,out=out[5]);
    Assignmentoperator(in=x6,out=out[6]);
    Assignmentoperator(in=x7,out=out[7]);
    Assignmentoperator(in=x8,out=out[8]);
    Assignmentoperator(in=x9,out=out[9]);
    Assignmentoperator(in=x10,out=out[10]);
    Assignmentoperator(in=x11,out=out[11]);
    Assignmentoperator(in=x12,out=out[12]);
    Assignmentoperator(in=x13,out=out[13]);
    Assignmentoperator(in=x14,out=out[14]);
    Assignmentoperator(in=x15,out=out[15]);
}